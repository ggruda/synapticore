<?php

declare(strict_types=1);

namespace App\Services\Tickets;

use App\DTO\PlanJson;
use Carbon\Carbon;

/**
 * Formats plan data into markdown for ticket comments.
 */
class TicketCommentFormatter
{
    /**
     * Format a plan into a markdown comment.
     */
    public function formatPlanComment(PlanJson $plan, ?string $workflowId = null): string
    {
        $markdown = [];

        // Header
        $markdown[] = '## 🤖 Synapticore Analysis Complete';
        $markdown[] = '';

        if ($workflowId) {
            $markdown[] = "_Workflow ID: {$workflowId}_";
            $markdown[] = '';
        }

        // Summary section
        $markdown[] = '### 📋 Summary';
        $markdown[] = $plan->summary;
        $markdown[] = '';

        // Risk assessment
        $markdown[] = '### ⚠️ Risk Assessment';
        $markdown[] = $this->formatRiskLevel($plan->riskLevel());
        $markdown[] = '';

        if (! empty($plan->breakingChanges)) {
            $markdown[] = '**⚠️ Breaking Changes Detected**';
            $markdown[] = '';
        }

        // Time estimate
        if ($plan->estimatedHours > 0) {
            $markdown[] = '### ⏱️ Estimated Time';
            $markdown[] = $this->formatTimeEstimate($plan->estimatedHours);
            $markdown[] = '';
        }

        // Implementation steps
        $markdown[] = '### 📝 Implementation Plan';
        $markdown[] = '';

        if (! empty($plan->steps)) {
            $markdown[] = $this->formatSteps($plan->steps);
            $markdown[] = '';
        }

        // Test strategy
        if (! empty($plan->testStrategy)) {
            $markdown[] = '### 🧪 Test Strategy';
            $markdown[] = $plan->testStrategy;
            $markdown[] = '';
        }

        // Dependencies
        if (! empty($plan->dependencies)) {
            $markdown[] = '### 📦 Dependencies';
            $markdown[] = $this->formatDependencies($plan->dependencies);
            $markdown[] = '';
        }

        // References (check in metadata)
        $references = $plan->metadata['references'] ?? [];
        if (! empty($references)) {
            $markdown[] = '### 🔗 References';
            $markdown[] = $this->formatReferences($references);
            $markdown[] = '';
        }

        // Footer
        $markdown[] = '---';
        $markdown[] = '_Generated by Synapticore at '.Carbon::now()->toIso8601String().'_';
        $markdown[] = '';
        $markdown[] = '**Next Steps:**';
        $markdown[] = '1. Review this plan';
        $markdown[] = '2. Approve or request changes';
        $markdown[] = '3. Implementation will begin automatically upon approval';

        return implode("\n", $markdown);
    }

    /**
     * Format risk level with emoji and color.
     */
    private function formatRiskLevel(string $riskLevel): string
    {
        return match (strtolower($riskLevel)) {
            'low' => '🟢 **Low Risk** - Standard changes with minimal impact',
            'medium' => '🟡 **Medium Risk** - Changes affecting multiple components',
            'high' => '🟠 **High Risk** - Significant architectural changes or migrations',
            'critical' => '🔴 **Critical Risk** - Breaking changes or security implications',
            default => '⚪ **Unknown Risk** - Manual review recommended',
        };
    }

    /**
     * Format time estimate into human-readable format.
     */
    private function formatTimeEstimate(float $hours): string
    {
        if ($hours < 1) {
            $minutes = (int) ($hours * 60);

            return "**{$minutes} minutes**";
        } elseif ($hours == 1) {
            return '**1 hour**';
        } elseif ($hours < 8) {
            return '**'.number_format($hours, 1).' hours**';
        } else {
            $days = $hours / 8;
            if ($days == 1) {
                return '**1 day** (8 hours)';
            } else {
                return '**'.number_format($days, 1).' days** ('.number_format($hours, 0).' hours)';
            }
        }
    }

    /**
     * Format implementation steps as a checklist.
     */
    private function formatSteps(array $steps): string
    {
        $formatted = [];

        foreach ($steps as $index => $step) {
            $number = $index + 1;
            $formatted[] = "#### Step {$number}: {$step['intent']}";

            if (! empty($step['description'])) {
                $formatted[] = $step['description'];
            }

            // Targets
            if (! empty($step['targets'])) {
                $formatted[] = '';
                $formatted[] = '**Files to modify:**';
                foreach ($step['targets'] as $target) {
                    $formatted[] = "- `{$target}`";
                }
            }

            // Rationale
            if (! empty($step['rationale'])) {
                $formatted[] = '';
                $formatted[] = "**Rationale:** {$step['rationale']}";
            }

            // Acceptance criteria
            if (! empty($step['acceptanceCriteria'])) {
                $formatted[] = '';
                $formatted[] = '**Acceptance Criteria:**';
                foreach ($step['acceptanceCriteria'] as $criteria) {
                    $formatted[] = "- [ ] {$criteria}";
                }
            }

            // Risk factors
            if (! empty($step['riskFactors'])) {
                $formatted[] = '';
                $formatted[] = '**Risk Factors:**';
                foreach ($step['riskFactors'] as $risk) {
                    $formatted[] = "- ⚠️ {$risk}";
                }
            }

            $formatted[] = '';
        }

        return implode("\n", $formatted);
    }

    /**
     * Format dependencies list.
     */
    private function formatDependencies(array $dependencies): string
    {
        $formatted = [];

        // Group by type if possible
        $grouped = [];
        foreach ($dependencies as $dep) {
            if (is_array($dep) && isset($dep['type'])) {
                $grouped[$dep['type']][] = $dep;
            } else {
                $grouped['other'][] = $dep;
            }
        }

        foreach ($grouped as $type => $deps) {
            if ($type !== 'other') {
                $formatted[] = "**{$type}:**";
            }

            foreach ($deps as $dep) {
                if (is_array($dep)) {
                    $name = $dep['name'] ?? 'Unknown';
                    $version = $dep['version'] ?? '';
                    $formatted[] = "- `{$name}` {$version}";
                } else {
                    $formatted[] = "- {$dep}";
                }
            }

            $formatted[] = '';
        }

        return implode("\n", $formatted);
    }

    /**
     * Format references as links.
     */
    private function formatReferences(array $references): string
    {
        $formatted = [];

        foreach ($references as $ref) {
            if (is_array($ref)) {
                $title = $ref['title'] ?? 'Reference';
                $url = $ref['url'] ?? '#';
                $formatted[] = "- [{$title}]({$url})";
            } elseif (filter_var($ref, FILTER_VALIDATE_URL)) {
                $formatted[] = "- [{$ref}]({$ref})";
            } else {
                $formatted[] = "- {$ref}";
            }
        }

        return implode("\n", $formatted);
    }

    /**
     * Format a simple status update comment.
     */
    public function formatStatusComment(string $status, array $metadata = []): string
    {
        $markdown = [];

        $emoji = match ($status) {
            'planning' => '🤔',
            'implementing' => '⚙️',
            'testing' => '🧪',
            'reviewing' => '👀',
            'completed' => '✅',
            'failed' => '❌',
            default => '📝',
        };

        $markdown[] = "{$emoji} **Synapticore Status Update**";
        $markdown[] = '';
        $markdown[] = 'Status: **'.ucfirst($status).'**';

        if (! empty($metadata['message'])) {
            $markdown[] = '';
            $markdown[] = $metadata['message'];
        }

        if (! empty($metadata['details'])) {
            $markdown[] = '';
            $markdown[] = 'Details:';
            foreach ($metadata['details'] as $key => $value) {
                $markdown[] = "- {$key}: {$value}";
            }
        }

        $markdown[] = '';
        $markdown[] = '_Updated at '.Carbon::now()->toIso8601String().'_';

        return implode("\n", $markdown);
    }
}
