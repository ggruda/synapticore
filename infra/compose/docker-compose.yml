services:
  # PHP-FPM Application Container
  app:
    build:
      context: ../../
      dockerfile: infra/compose/Dockerfile.app
    container_name: synapticore_app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ../../:/var/www/html
      - ./php.ini:/usr/local/etc/php/conf.d/custom.ini
    networks:
      - synapticore
    depends_on:
      - postgres
      - redis
      - minio
    environment:
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FILESYSTEM_DISK=spaces
      - AWS_ENDPOINT=http://minio:9000
      - AWS_USE_PATH_STYLE_ENDPOINT=true

  # Nginx Web Server
  nginx:
    image: nginx:alpine
    container_name: synapticore_nginx
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ../../:/var/www/html
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../nginx/sites:/etc/nginx/sites-available
    networks:
      - synapticore
    depends_on:
      - app

  # PostgreSQL with pgvector
  postgres:
    image: pgvector/pgvector:pg16
    container_name: synapticore_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE:-synapticore}
      POSTGRES_USER: ${DB_USERNAME:-synapticore}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secret}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-pgvector.sql:/docker-entrypoint-initdb.d/10-init-pgvector.sql
    networks:
      - synapticore
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-synapticore}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: synapticore_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - synapticore
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: synapticore_minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${DO_SPACES_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${DO_SPACES_SECRET:-minioadmin123}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - synapticore
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO Init Job (Create buckets)
  minio-init:
    image: minio/mc:latest
    container_name: synapticore_minio_init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 ${DO_SPACES_KEY:-minioadmin} ${DO_SPACES_SECRET:-minioadmin123};
      mc mb --ignore-existing myminio/${DO_SPACES_BUCKET:-synapticore};
      mc anonymous set public myminio/${DO_SPACES_BUCKET:-synapticore}/public;
      exit 0;
      "
    networks:
      - synapticore

  # Mailpit (Local SMTP testing)
  mailpit:
    image: axllent/mailpit:latest
    container_name: synapticore_mailpit
    restart: unless-stopped
    ports:
      - "1025:1025"
      - "8030:8025"
    networks:
      - synapticore
    environment:
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: synapticore_otel_collector
    restart: unless-stopped
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8888:8888"   # Prometheus metrics
    networks:
      - synapticore

  # Loki (Log aggregation)
  loki:
    image: grafana/loki:latest
    container_name: synapticore_loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ../loki/loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - synapticore

  # Promtail (Log shipper)
  promtail:
    image: grafana/promtail:latest
    container_name: synapticore_promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail-config.yaml:/etc/promtail/config.yaml
      - ../../storage/logs:/var/www/html/storage/logs:ro
    command: -config.file=/etc/promtail/config.yaml
    networks:
      - synapticore
    depends_on:
      - loki

  # Prometheus (Metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: synapticore_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ../prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - synapticore

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: synapticore_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=
    volumes:
      - ../grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    networks:
      - synapticore
    depends_on:
      - prometheus
      - loki

networks:
  synapticore:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  loki_data:
  prometheus_data:
  grafana_data: